generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Note: SQLite ne supporte pas les enums natifs. On utilise des String avec conventions.

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  name      String?
  password  String
  role      String    @default("STUDENT") // STUDENT | TEACHER
  createdAt DateTime  @default(now())
  submissions Submission[]
  progresses Progress[]
  userBadges UserBadge[]
}

model Exercise {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  level       String   // SIXIEME | CINQUIEME | QUATRIEME | TROISIEME
  topic       String   // MATTER | SIGNALS | ENERGY | MOTION
  expected    String?
  // Optional molecule-related metadata for specialized exercises
  kind         String   @default("STANDARD") // STANDARD | MOLECULE
  targetSmiles String?
  checkMode    String?  // e.g., CONNECTIVITY
  createdAt   DateTime @default(now())
  submissions Submission[]
}

model Submission {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  exercise    Exercise? @relation(fields: [exerciseId], references: [id])
  exerciseId  Int?
  imageExercise ImageExercise? @relation(fields: [imageExerciseId], references: [id])
  imageExerciseId Int? @map("pdfExerciseId")
  answer      String
  imagePath   String?
  feedback    String
  score       Int?
  createdAt   DateTime @default(now())
}

model Progress {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  level     String   // see above
  topic     String   // see above
  completed Int      @default(0)
  updatedAt DateTime @updatedAt
  @@unique([userId, level, topic])
}

model Badge {
  id          Int        @id @default(autoincrement())
  name        String
  description String
  icon        String
  userBadges  UserBadge[]
}

model UserBadge {
  id      Int  @id @default(autoincrement())
  user    User @relation(fields: [userId], references: [id])
  userId  Int
  badge   Badge @relation(fields: [badgeId], references: [id])
  badgeId Int
  earnedAt DateTime @default(now())
  @@unique([userId, badgeId])
}

// Image-based exercises uploaded by teachers (previously PdfExercise)
model ImageExercise {
  id           Int      @id @default(autoincrement())
  title        String
  level        String   // SIXIEME | CINQUIEME | QUATRIEME | TROISIEME
  topic        String   // MATTER | SIGNALS | ENERGY | MOTION
  imagePath    String   @map("pdfPath") // public path e.g. /uploads/123-file.(png|jpg|webp)
  originalName String?
  createdAt    DateTime @default(now())
  submissions  Submission[]
  pages        ImageExercisePage[]
  @@map("PdfExercise")
}

// Additional pages for an image-based exercise (mapped to legacy PdfPageImage)
model ImageExercisePage {
  id               Int            @id @default(autoincrement())
  imageExercise    ImageExercise  @relation(fields: [imageExerciseId], references: [id])
  imageExerciseId  Int            @map("pdfExerciseId")
  pageNumber       Int
  imagePath        String
  createdAt        DateTime       @default(now())
  @@unique([imageExerciseId, pageNumber])
  @@map("PdfPageImage")
}
